-- Migration pour am√©liorer le syst√®me de notifications
-- Ajouter les nouvelles colonnes aux notifications existantes

-- √âtendre la table notifications avec les nouvelles fonctionnalit√©s
ALTER TABLE notifications 
ADD COLUMN IF NOT EXISTS template VARCHAR(50),
ADD COLUMN IF NOT EXISTS priority VARCHAR(20) DEFAULT 'normal' CHECK (priority IN ('low', 'normal', 'high', 'urgent')),
ADD COLUMN IF NOT EXISTS category VARCHAR(50),
ADD COLUMN IF NOT EXISTS metadata JSONB DEFAULT '{}',
ADD COLUMN IF NOT EXISTS action VARCHAR(50),
ADD COLUMN IF NOT EXISTS target VARCHAR(100),
ADD COLUMN IF NOT EXISTS entity_id VARCHAR(100);

-- Cr√©er un index pour am√©liorer les performances de recherche
CREATE INDEX IF NOT EXISTS idx_notifications_search ON notifications USING gin(to_tsvector('french', text));
CREATE INDEX IF NOT EXISTS idx_notifications_type ON notifications(type);
CREATE INDEX IF NOT EXISTS idx_notifications_priority ON notifications(priority);
CREATE INDEX IF NOT EXISTS idx_notifications_category ON notifications(category);
CREATE INDEX IF NOT EXISTS idx_notifications_created_at ON notifications(created_at DESC);
CREATE INDEX IF NOT EXISTS idx_notifications_user_read ON notifications(user_id, read);

-- Table pour les abonnements push
CREATE TABLE IF NOT EXISTS push_subscriptions (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    endpoint TEXT NOT NULL,
    subscription JSONB NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(user_id, endpoint)
);

-- Index pour les abonnements push
CREATE INDEX IF NOT EXISTS idx_push_subscriptions_user ON push_subscriptions(user_id);
CREATE INDEX IF NOT EXISTS idx_push_subscriptions_endpoint ON push_subscriptions(endpoint);

-- Table pour les templates de notifications personnalis√©s
CREATE TABLE IF NOT EXISTS notification_templates (
    id VARCHAR(50) PRIMARY KEY,
    user_id UUID REFERENCES users(id) ON DELETE CASCADE,
    type VARCHAR(50) NOT NULL,
    title VARCHAR(200) NOT NULL,
    body TEXT NOT NULL,
    icon VARCHAR(100),
    color VARCHAR(7) DEFAULT '#6366F1',
    sound VARCHAR(50) DEFAULT 'default',
    vibration INTEGER[] DEFAULT ARRAY[200, 100, 200],
    actions JSONB DEFAULT '[]',
    is_system BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Index pour les templates
CREATE INDEX IF NOT EXISTS idx_notification_templates_user ON notification_templates(user_id);
CREATE INDEX IF NOT EXISTS idx_notification_templates_type ON notification_templates(type);
CREATE INDEX IF NOT EXISTS idx_notification_templates_system ON notification_templates(is_system);

-- Ins√©rer les templates syst√®me par d√©faut
INSERT INTO notification_templates (id, type, title, body, icon, color, sound, vibration, actions, is_system) VALUES
('transaction_created', 'transaction', 'üí∞ Nouvelle Transaction', 'Une nouvelle transaction a √©t√© cr√©√©e', 'üí∞', '#10B981', 'default', ARRAY[200, 100, 200], '[{"action": "view", "title": "Voir", "icon": "üëÅÔ∏è"}, {"action": "dismiss", "title": "Ignorer"}]', TRUE),
('transaction_validation', 'validation', '‚ö†Ô∏è Validation Requise', 'Une transaction n√©cessite votre validation', '‚ö†Ô∏è', '#F59E0B', 'urgent', ARRAY[300, 200, 300, 200, 300], '[{"action": "validate", "title": "Valider", "icon": "‚úÖ"}, {"action": "reject", "title": "Rejeter", "icon": "‚ùå"}, {"action": "view", "title": "Voir"}]', TRUE),
('security_alert', 'security', 'üîí Alerte S√©curit√©', 'Activit√© suspecte d√©tect√©e', 'üîí', '#EF4444', 'urgent', ARRAY[500, 300, 500, 300, 500], '[{"action": "secure", "title": "S√©curiser", "icon": "üõ°Ô∏è"}, {"action": "view", "title": "D√©tails"}]', TRUE),
('system_update', 'system', 'üîÑ Mise √† jour', 'Mise √† jour syst√®me disponible', 'üîÑ', '#6366F1', 'soft', ARRAY[100], '[{"action": "update", "title": "Mettre √† jour", "icon": "‚¨ÜÔ∏è"}, {"action": "later", "title": "Plus tard"}]', TRUE),
('message', 'communication', 'üí¨ Nouveau Message', 'Vous avez re√ßu un nouveau message', 'üí¨', '#3B82F6', 'message', ARRAY[200, 100, 200], '[{"action": "reply", "title": "R√©pondre", "icon": "‚Ü©Ô∏è"}, {"action": "view", "title": "Voir"}]', TRUE)
ON CONFLICT (id) DO UPDATE SET
    title = EXCLUDED.title,
    body = EXCLUDED.body,
    icon = EXCLUDED.icon,
    color = EXCLUDED.color,
    sound = EXCLUDED.sound,
    vibration = EXCLUDED.vibration,
    actions = EXCLUDED.actions,
    updated_at = NOW();

-- Table pour les param√®tres de notifications par utilisateur
CREATE TABLE IF NOT EXISTS user_notification_settings (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    push_enabled BOOLEAN DEFAULT FALSE,
    push_transactions BOOLEAN DEFAULT TRUE,
    push_security BOOLEAN DEFAULT TRUE,
    push_system BOOLEAN DEFAULT FALSE,
    push_messages BOOLEAN DEFAULT TRUE,
    quiet_hours_enabled BOOLEAN DEFAULT FALSE,
    quiet_hours_start TIME DEFAULT '22:00',
    quiet_hours_end TIME DEFAULT '08:00',
    vibration_enabled BOOLEAN DEFAULT TRUE,
    sound_enabled BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(user_id)
);

-- Index pour les param√®tres utilisateur
CREATE INDEX IF NOT EXISTS idx_user_notification_settings_user ON user_notification_settings(user_id);

-- Fonction pour cr√©er automatiquement les param√®tres par d√©faut
CREATE OR REPLACE FUNCTION create_default_notification_settings()
RETURNS TRIGGER AS $$
BEGIN
    INSERT INTO user_notification_settings (user_id)
    VALUES (NEW.id)
    ON CONFLICT (user_id) DO NOTHING;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger pour cr√©er les param√®tres par d√©faut lors de la cr√©ation d'un utilisateur
DROP TRIGGER IF EXISTS trigger_create_notification_settings ON users;
CREATE TRIGGER trigger_create_notification_settings
    AFTER INSERT ON users
    FOR EACH ROW
    EXECUTE FUNCTION create_default_notification_settings();

-- Fonction pour nettoyer les anciennes notifications (optionnel)
CREATE OR REPLACE FUNCTION cleanup_old_notifications()
RETURNS void AS $$
BEGIN
    -- Supprimer les notifications de plus de 90 jours
    DELETE FROM notifications 
    WHERE created_at < NOW() - INTERVAL '90 days';
    
    -- Garder seulement les 1000 derni√®res notifications par utilisateur
    WITH ranked_notifications AS (
        SELECT id, ROW_NUMBER() OVER (PARTITION BY user_id ORDER BY created_at DESC) as rn
        FROM notifications
    )
    DELETE FROM notifications 
    WHERE id IN (
        SELECT id FROM ranked_notifications WHERE rn > 1000
    );
END;
$$ LANGUAGE plpgsql;

-- Cr√©er les param√®tres par d√©faut pour les utilisateurs existants
INSERT INTO user_notification_settings (user_id)
SELECT id FROM users
ON CONFLICT (user_id) DO NOTHING;

-- Mettre √† jour les notifications existantes avec des valeurs par d√©faut
UPDATE notifications 
SET 
    priority = 'normal',
    category = CASE 
        WHEN type = 'transaction' THEN 'finance'
        WHEN type = 'security' THEN 'security'
        WHEN type = 'system' THEN 'system'
        ELSE 'general'
    END,
    template = CASE 
        WHEN type = 'transaction' THEN 'transaction_created'
        WHEN type = 'validation' THEN 'transaction_validation'
        WHEN type = 'security' THEN 'security_alert'
        WHEN type = 'system' THEN 'system_update'
        ELSE 'message'
    END
WHERE priority IS NULL OR template IS NULL;

-- Politique RLS pour les nouvelles tables
ALTER TABLE push_subscriptions ENABLE ROW LEVEL SECURITY;
ALTER TABLE notification_templates ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_notification_settings ENABLE ROW LEVEL SECURITY;

-- Politiques pour push_subscriptions
CREATE POLICY "Users can manage their own push subscriptions" ON push_subscriptions
    FOR ALL USING (auth.uid() = user_id);

-- Politiques pour notification_templates
CREATE POLICY "Users can view system templates" ON notification_templates
    FOR SELECT USING (is_system = TRUE OR auth.uid() = user_id);

CREATE POLICY "Users can manage their own templates" ON notification_templates
    FOR ALL USING (auth.uid() = user_id AND is_system = FALSE);

-- Politiques pour user_notification_settings
CREATE POLICY "Users can manage their own notification settings" ON user_notification_settings
    FOR ALL USING (auth.uid() = user_id);

-- Commentaires pour la documentation
COMMENT ON TABLE push_subscriptions IS 'Stockage des abonnements push pour les notifications mobiles';
COMMENT ON TABLE notification_templates IS 'Templates personnalisables pour les notifications';
COMMENT ON TABLE user_notification_settings IS 'Param√®tres de notifications par utilisateur';
COMMENT ON COLUMN notifications.template IS 'ID du template utilis√© pour cette notification';
COMMENT ON COLUMN notifications.priority IS 'Priorit√© de la notification (low, normal, high, urgent)';
COMMENT ON COLUMN notifications.category IS 'Cat√©gorie pour le filtrage et l''organisation';
COMMENT ON COLUMN notifications.metadata IS 'Donn√©es suppl√©mentaires en JSON';
COMMENT ON COLUMN notifications.action IS 'Action syst√®me associ√©e √† la notification';
COMMENT ON COLUMN notifications.target IS 'Cible de l''action (page, composant, etc.)';
COMMENT ON COLUMN notifications.entity_id IS 'ID de l''entit√© li√©e √† la notification';